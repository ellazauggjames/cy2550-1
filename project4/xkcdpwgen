#!/usr/bin/env python3

import sys
import random

def print_help():
    print("usage: xkcdpwgen [-h] [-w WORDS] [-c CAPS] [-n NUMBERS] [-s SYMBOLS]\n");
    print("Generate a secure, memorable password using the XKCD method\n");
    print("optional arguments:");
    print("    -h, --help            show this help message and exit");
    print("    -w WORDS, --words WORDS");
    print("                          include WORDS words in the password (default=4)");         
    print("    -c CAPS, --caps CAPS  capitalize the first letter of CAPS random words");
    print("                          (default=0)");
    print("    -n NUMBERS, --numbers NUMBERS");
    print("                          insert NUMBERS random numbers in the password");
    print("                          (default=0)");
    print("    -s SYMBOLS, --symbols SYMBOLS");
    print("                          insert SYMBOLS random symbols in the password");
    print("                          (default=0)");

words = 4
caps = 0
numbers = 0
symbols = 0

i = 1
while i < len(sys.argv):
    arg = sys.argv[i]
    if arg == "-h" or arg == "--help":
        print_help()
        i -= 1 # the other options take an extra arg, but -h doesn't
    elif arg == "-w" or arg == "--words":
        words = int(sys.argv[i + 1]);
    elif arg == "-c" or arg == "--caps":
        caps = int(sys.argv[i + 1]);
    elif arg == "-n" or arg == "--numbers":
        numbers = int(sys.argv[i + 1]);
    elif arg == "-s" or arg == "--symbols":
        symbols = int(sys.argv[i + 1]);
    else:
        raise Exception("Invalid arguments, call './xkcdpwgen -h' for help.")

    i += 2 # inc by 2 instead of 1 to account for the extra arg

if caps > words:
    raise Exception("Number of caps must be <= number of words.")


wordlist = open("words.txt").read().splitlines()

# random words
password = random.sample(wordlist, words)

# capitalize words at random indices
for cap in random.sample([i for i in range(len(password))], caps):
    password[cap] = password[cap].capitalize()

#insert random numbers
for i in range(numbers):
    password.insert(random.choice(range(len(password))), str(random.choice(range(9))))

#insert random symbols
for i in range(symbols):
    password.insert(random.choice(range(len(password))), random.choice("~!@#$%^&*.:;"))

print("".join(password))
